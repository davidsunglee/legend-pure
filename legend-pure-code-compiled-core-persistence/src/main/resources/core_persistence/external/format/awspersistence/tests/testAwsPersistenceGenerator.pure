// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::awspersistence::generation::*;
import meta::pure::executionPlan::profiles::*;
import meta::external::format::awspersistence::generation::tests::*;
import meta::json::*;

import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::persistence::metamodel::notifier::*;
import meta::pure::persistence::metamodel::reader::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::metamodel::persister::audit::*;
import meta::pure::persistence::metamodel::persister::targetshape::*;
import meta::pure::persistence::metamodel::persister::ingestmode::*;
import meta::pure::persistence::metamodel::persister::ingestmode::snapshot::*;
import meta::pure::persistence::metamodel::persister::deduplication::*;
import meta::legend::service::metamodel::*;

Profile meta::external::format::awspersistence::generation::tests::AwsPersistenceProperty
{
   tags: [
     p1, p2, p3
   ];
}

Class <<access.private>> meta::external::format::awspersistence::generation::tests::A
{
    a: String[1];
}

// function <<access.private>> meta::external::format::awspersistence::generation::tests::getPersistence(): Persistence[1]
// {
//   let package = meta::pure::functions::meta::pathToPackage('cnas::pipes', true);
// 
//   let notifier = ^Notifier(
//     notifyees = [
//       ^EmailNotifyee(emailAddress = 'basecamp@k2.com'),
//       ^PagerDutyNotifyee(url = 'http://mountains.are.cool')
// 	]
//   );
// 
//   let service = ^Service(
// 	package = $package,
// 	pattern = '/mountains/lhotse',
// 	owners = ['ram'],
// 	autoActivateUpdates = true,
// 	documentation = 'A service',
// 	execution = ^PureExecution(func = {|true}),
// 	test = ^Test(),
// 	tags = []
//   );
// 
//   let p = ^Persistence(
//     package = $package,
//     documentation = 'Mountains persist for a long time',
//     trigger = ^ManualTrigger(),
//     service = $service,
//     persister = ^BatchPersister(
// 	  ingestMode = ^NontemporalSnapshot(
//         auditing = ^NoAuditing()
//       ),
//       targetShape = ^FlatTarget(
//         modelClass = A,
//         targetName = 's3sink',
//         deduplicationStrategy = ^NoDeduplicationStrategy()
//       )
//     ),
//     notifier = $notifier
//   );
// 
//   $p;
// }
// 
// 
// function <<test.Test>> {serverVersion.start='v1_20_0'} meta::external::format::awspersistence::generation::tests::transform_persistenceToBackend(): Boolean[1]
// {
//   let p = getPersistence();
//   let config = meta::external::format::awspersistence::generation::defaultConfig();
//   let schema = transform(^$config(scopeElements=[$p]))->at(0)->at(0).content;
//   assertEquals('{"documentation":"Mountains persist for a long time","notifier":{"notifyees":[{"emailAddress":"basecamp@k2.com"},{"url":"http:\\/\\/mountains.are.cool"}]},"trigger":{},"service":"cnas::pipes","persister":{"targetShape":{"modelClass":{"package":"meta::external::format::awspersistence::generation::tests","name":"A","sourceInformation":{"source":"\\/core\\/external\\/format\\/awspersistence\\/tests\\/testAwsPersistenceGenerator.pure","line":39,"column":74,"startLine":39,"startColumn":1,"endLine":42,"endColumn":1},"typeParameters":[],"generalizations":[{"rawType":"meta::pure::metamodel::type::Any","typeArguments":[]}],"properties":[{"name":"a","aggregation":"None","multiplicity":"1","genericType":{"rawType":"String","typeArguments":[]},"stereotypes":[],"taggedValues":[]}],"qualifiedProperties":[],"stereotypes":[{"profile":"meta::pure::profiles::access","value":"private"}],"taggedValues":[]},"targetName":"s3sink","deduplicationStrategy":{},"ingestMode":{"auditing":{}}}}}', $schema);
// }
